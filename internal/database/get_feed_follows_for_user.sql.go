// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_feed_follows_for_user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
            feed_follows.ID
            ,feed_follows.created_at
            ,feed_follows.created_at
            ,feeds.name AS feedName
            ,users.name AS userName
FROM        feed_follows
INNER JOIN  feeds ON feeds.ID = feed_follows.feed_id
INNER JOIN  users ON users.ID = feed_follows.user_id
WHERE       users.name = $1
`

type GetFeedFollowsForUserRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	CreatedAt_2 time.Time
	Feedname    string
	Username    string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.CreatedAt_2,
			&i.Feedname,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
