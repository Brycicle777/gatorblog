// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: get_feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getFeeds = `-- name: GetFeeds :many
SELECT
            feeds.id
            ,feeds.created_at
            ,feeds.updated_at
            ,feeds.name AS feedName
            ,feeds.url
            ,users.name AS userName
FROM        feeds
INNER JOIN  users ON users.ID = feeds.user_id
`

type GetFeedsRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Feedname  string
	Url       string
	Username  string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Feedname,
			&i.Url,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
